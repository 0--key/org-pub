#+BEGIN_EXPORT html
---
layout: post
title: Go programming
tagline: " not a monstrous task at all"
permalink: /go/emacs/ide/chromebook-hp-14a-0060nr.html
categories: [GoLang, IDE, Emacs, Chromebook]
tags: [tutorial, ide, chromebook]
---
#+END_EXPORT

#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export
* Useful links
* Go installation on Buster

  By default your Chromebook runs Linux container with Debian
  Buster. In assumption thay you are already a proficient Debian user
  it might be easy-peasy to install Golang from the official
  repository:
  #+BEGIN_SRC sh
  sudo apt-get install golang
  #+END_SRC

  Lets check up Golang version to ensure the success of your
  installation:
  #+BEGIN_SRC sh
  go version
  #+END_SRC

  #+RESULTS:
  : go version go1.11.6 linux/amd64

* Babel configuration

  Org-mode inside emacs propose you to write the /alive code
  snippets/, freely launch it and get its output in one single
  place. It is a core idea of literate programming. By default
  Org-mode does not prepared to digest Golang. Lets configure your
  Emacs editor to cope with Golang code snippets:
  #+BEGIN_SRC elisp
    package-install ob-go
    package-install go-mode
  #+END_SRC
* Default conventions

  By default:
  - if you don't define function name it is =main=;
  - you should manually define neccessary imports in the snippet's
    header.

* The primitive sample

  With intention to test up how it works lets compose the trivial
  sample and launch it by typing =C-c C-c=:
  #+begin_src go :imports "fmt"
    fmt.Println("Hello, 世界")
  #+end_src

  #+RESULTS:
  : Hello, 世界
* Functions and Scope

  #+begin_src go :imports "fmt"
    func main() {
    fmt.Printf("My number is: %d\n", triple_add(2, 3, 4))
    }
    func triple_add(a, b, c int) int{
    return a + b + c
    }
  #+end_src

  #+RESULTS:
  : My number is: 9

