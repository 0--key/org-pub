#+BEGIN_EXPORT html
---
layout: page
title: Open AI
tagline: " Assistant"
permalink: /python/openai/assistant.html
categories: [Python, OpenAI]
tags: [assistant]
---
#+END_EXPORT
#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+PROPERTY: header-args :exports both
#+PROPERTY: header-args+ :results output pp
#+PROPERTY: header-args+ :eval no-export
#+PROPERTY: header-args+ :session assistant
#+TOC: headlines 2
* Preface
#+begin_quote
The Assistants API allows you to build AI assistants within your own
applications. An Assistant has instructions and can leverage models,
tools, and files to respond to user queries. The Assistants API
currently supports three types of tools: Code Interpreter, File
Search, and Function calling.
#+end_quote
* Math tutor

#+begin_src python
  from openai import OpenAI
  client = OpenAI()
  
  assistant = client.beta.assistants.create(
    name="Math Tutor",
    instructions="You are a personal math tutor. Write and run code to answer math questions.",
    tools=[{"type": "code_interpreter"}],
    model="gpt-4o",
  )
  print(assistant)
#+end_src

#+RESULTS:
: Assistant(id='asst_vMxWgGdmIhiu8yCbdgdEdbFO', created_at=1718953930, description=None, instructions='You are a personal math tutor. Write and run code to answer math questions.', metadata={}, model='gpt-4o', name='Math Tutor', object='assistant', tools=[CodeInterpreterTool(type='code_interpreter')], response_format='auto', temperature=1.0, tool_resources=ToolResources(code_interpreter=ToolResourcesCodeInterpreter(file_ids=[]), file_search=None), top_p=1.0)

#+begin_src python
print(assistant.id)
#+end_src

#+RESULTS:
: asst_vMxWgGdmIhiu8yCbdgdEdbFO

* Thread

#+begin_src python
  thread = client.beta.threads.create()
  print(thread.id)
#+end_src

#+RESULTS:
: thread_oIboEDWRHf9bswQdiZ7J3KcM

* Add a Message to the Thread

#+begin_src python :results none
  message = client.beta.threads.messages.create(
      thread_id=thread.id,
      role="user",
      content="I need to solve the equation `3x + 11 = 14`. Can you help me?"
  )
#+end_src


#+begin_src python
  print(client.beta.threads.messages.list(thread.id))
#+end_src


#+RESULTS:
: SyncCursorPage[Message](data=[Message(id='msg_qMNwFITY8ZhLysfvy98SioUc', assistant_id=None, attachments=[], completed_at=None, content=[TextContentBlock(text=Text(annotations=[], value='I need to solve the equation `3x + 11 = 14`. Can you help me?'), type='text')], created_at=1718955529, incomplete_at=None, incomplete_details=None, metadata={}, object='thread.message', role='user', run_id=None, status=None, thread_id='thread_oIboEDWRHf9bswQdiZ7J3KcM')], object='list', first_id='msg_qMNwFITY8ZhLysfvy98SioUc', last_id='msg_qMNwFITY8ZhLysfvy98SioUc', has_more=False)

* Create a Run

#+begin_src python
  run = client.beta.threads.runs.create_and_poll(
    thread_id=thread.id,
    assistant_id=assistant.id
  )
  if run.status == 'completed': 
    messages = client.beta.threads.messages.list(
      thread_id=thread.id
    )
    print(messages)
  else:
    print(run.status)
#+end_src

#+RESULTS:
: SyncCursorPage[Message](data=[Message(id='msg_DggrL97Et9xU3lj0tGiaA8g1', assistant_id='asst_vMxWgGdmIhiu8yCbdgdEdbFO', attachments=[], completed_at=None, content=[TextContentBlock(text=Text(annotations=[], value="Sure! To solve the equation \\( 3x + 11 = 14 \\), follow these steps:\n\n1. Subtract 11 from both sides of the equation to isolate the term with \\( x \\):\n\\[ 3x + 11 - 11 = 14 - 11 \\]\n\\[ 3x = 3 \\]\n\n2. Divide both sides by 3 to solve for \\( x \\):\n\\[ \\frac{3x}{3} = \\frac{3}{3} \\]\n\\[ x = 1 \\]\n\nSo, \\( x = 1 \\). Let's verify this solution by substitution. \n\nTo check, substitute \\( x = 1 \\) back into the original equation:\n\\[ 3(1) + 11 \\]\n\\[ 3 + 11 \\]\n\\[ 14 \\]\n\nSince both sides of the equation are equal, we have verified that \\( x = 1 \\) is correct."), type='text')], created_at=1718956504, incomplete_at=None, incomplete_details=None, metadata={}, object='thread.message', role='assistant', run_id='run_wdtFyTt2DJ0lcqLXH7KkTHXF', status=None, thread_id='thread_oIboEDWRHf9bswQdiZ7J3KcM'), Message(id='msg_qMNwFITY8ZhLysfvy98SioUc', assistant_id=None, attachments=[], completed_at=None, content=[TextContentBlock(text=Text(annotations=[], value='I need to solve the equation `3x + 11 = 14`. Can you help me?'), type='text')], created_at=1718955529, incomplete_at=None, incomplete_details=None, metadata={}, object='thread.message', role='user', run_id=None, status=None, thread_id='thread_oIboEDWRHf9bswQdiZ7J3KcM')], object='list', first_id='msg_DggrL97Et9xU3lj0tGiaA8g1', last_id='msg_qMNwFITY8ZhLysfvy98SioUc', has_more=False)

* List Messages in the Thread

#+begin_src python
  all_thread_messages = client.beta.threads.messages.list(thread.id).data
  last_message_in_the_thread = all_thread_messages[0]
  print(last_message_in_the_thread.content[0].text.value)
#+end_src

#+RESULTS:
#+begin_example
Sure! To solve the equation \( 3x + 11 = 14 \), follow these steps:

1. Subtract 11 from both sides of the equation to isolate the term with \( x \):
\[ 3x + 11 - 11 = 14 - 11 \]
\[ 3x = 3 \]

2. Divide both sides by 3 to solve for \( x \):
\[ \frac{3x}{3} = \frac{3}{3} \]
\[ x = 1 \]

So, \( x = 1 \). Let's verify this solution by substitution. 

To check, substitute \( x = 1 \) back into the original equation:
\[ 3(1) + 11 \]
\[ 3 + 11 \]
\[ 14 \]

Since both sides of the equation are equal, we have verified that \( x = 1 \) is correct.
#+end_example
