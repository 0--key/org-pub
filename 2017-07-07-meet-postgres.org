#+BEGIN_EXPORT html
---
layout: post
title: Maria DB
tagline: " at the first glance"
permalink: /postgres/first-steps.html
categories: [Postgres, Debian9, literate programming]
tags: [post-installation, configuration]
---
#+END_EXPORT

#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export

* Intro

  From the /official documentation/:

  #+BEGIN_QUOTE
  PostgreSQL is an object-relational database management system
  (ORDBMS) based on POSTGRES, Version 4.2, developed at the University
  of California at Berkeley Computer Science Department. POSTGRES
  pioneered many concepts that only became available in some
  commercial database systems much later.
  #+END_QUOTE
* Installation

  =Debian= has a straightforward policy in OS administration: all
  secure or /unsecure/ operations are prohibited for ordinary user and
  allowed for ~root~ only. Thus all ~Postgres~ post-installation (it's
  a pun, but it is :) procedures should be accomplished as ~root~.

  #+BEGIN_EXAMPLE
  # apt-get install postgresql-doc postgresql postgresql-client
  # apt-get install pgadmin3 pgadmin3-data
  #+END_EXAMPLE

* First Steps

** Init DB and customary user
   
   Exactly for /security purpose/ we'll allow any OS user to connect
   with =Postgres= server locally without ~password~. We trust our
   logged users :)
   First of all log-in as *root* and:
  
   #+BEGIN_EXAMPLE
   ~# su - postgres
   ~$ psql
   postgres=# \du //check-up already existing users
  				 List of roles
   Role name |                         Attributes                         | Member of 
   -----------+------------------------------------------------------------+-----------
   postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}

   // create a new one:
   postgres=# CREATE USER <user_name> CREATEDB;
   postgres=# \du
  				 List of roles
   Role name  |                         Attributes                         | Member of 
   -----------+------------------------------------------------------------+-----------
   <user_name>| Create DB                                                  | {}
   postgres   | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
   #+END_EXAMPLE

   Now =Postgres= knows about <user_name>. It's time to log-in as a
   <user_name>, and create DB with <user_name>:

   #+BEGIN_EXAMPLE
   ~$ createdb
   #+END_EXAMPLE

   After these preparations it would feasible to connect to =Postgres=
   server from localhost for log-in users without a specific password:

   #+BEGIN_EXAMPLE
   ~$ psql
   psql (9.6.4)
   Type "help" for help.
   user_name=>
   #+END_EXAMPLE

** Emacs re-configuring

   Now, when you're able to connect your =Postgres= client with
   /server/ it is time to tune in your =Emacs= on SQL verse. There are
   several comprehensive tutorials below:

   - Brief intro [[https://www.emacswiki.org/emacs/SqlMode][into SQLmode]];
   - Must-read [[http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html][sample for Org-mode]] in scientific research;
   - SQL in Babel [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sql.html][introduction]]

