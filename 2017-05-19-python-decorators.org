#+BEGIN_EXPORT html
---
layout: post
title: Python decorates
tagline: " its functions and classes"
permalink: /python/decorators-dissection.html
categories: [literate programming]
tags: [python, decorator]
---
#+END_EXPORT

#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export

* Prelude
  
  It's undoubtly a tough task and a final point in Python functions
  scrutiny. But persistence and attention to details should eliminate
  most of headache.

  
* Simple function
  #+BEGIN_SRC python
    def primitive_function(arg_1, arg_2):
        """Multiply arguments and return result"""
        return arg_1 * arg_2

    assert(primitive_function(2, 2) == 4)
  #+END_SRC

  #+RESULTS:

* Nested function

  But what if we put the arbitrary function inside?
  #+BEGIN_SRC python
    def parent_function(arg_1, arg_2):
        """Evaluates all nested functions"""

        def first_nested_function(*args):
            """Converts positional argument"""
            args[0] += 1
            print(args)

        def second_nested_function(**kwargs):
            """Converts named argument"""
            kwargs['b'] = 'reassigned value'
            print(kwargs)

        first_nested_function('first_positional_argument')
        second_nested_function(b='b_value')

    parent_function(2, 3)
  #+END_SRC

  #+RESULTS:

* Syncactic shugar

  #+BEGIN_QUOTE
  
  #+END_QUOTE

* Primitive example

  Just to illustrate how it works:

** Return function in innate state
   #+BEGIN_SRC python
     def decorator(any_function_as_an_argument):
         """Do nothing, just returning an input function"""
         return any_function_as_an_argument


     @decorator
     def sample_function(a, b):
         return a + b

     assert(sample_function(2, 3) == 5)
   #+END_SRC

   #+RESULTS:

