#+BEGIN_HTML
---
layout: post
title: Write Python programs
tagline: " by means of Emacs' toolbox"
permalink: /coding/codewars-toy-tasks.html
categories: [literate programming, Python, CodeWars, emacs]
tags: [coding, algorithms]
---
#+END_HTML
#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2

* #1
  #+BEGIN_QUOTE
  Return the number (count) of vowels in the given string.
  We will consider a, e, i, o, and u as vowels for this Kata.
  #+END_QUOTE

  #+BEGIN_SRC python :results output
    def getCount(inputStr):
        num_vowels = 0
        # your code here
        for letter in inputStr:
            list_of_vowels = ['a', 'e', 'i', 'o', 'u']
            if letter in list_of_vowels:
                num_vowels += 1
                #print(letter)
                #print(num_vowels)
        return num_vowels

    input_string = 'John the dully boy write this book'

    print getCount(input_string)
    assert(getCount(input_string) == 9)

  #+END_SRC

  #+RESULTS:
  : 9

  
* #2 Last digit of a large number
  
** Description

   Define a function

   #+BEGIN_SRC python
   def last_digit(n1, n2):
      return   
   #+END_SRC

  that takes in two numbers a and b and returns the last decimal digit of a^b. Note that a and b may be very large!

  For example, the last decimal digit of 9^7 is 9, since 9^7 = 4782969. The last decimal digit of (2^200)^(2^300), which has over 10^92 decimal digits, is 6.

  The inputs to your function will always be non-negative integers.
  Examples

  last_digit(4, 1)                # returns 4
  last_digit(4, 2)                # returns 6
  last_digit(9, 7)                # returns 9
  last_digit(10, 10 ** 10)        # returns 0
  last_digit(2 ** 200, 2 ** 300)  # returns 6

  Remarks
  JavaScript

  Since JavaScript doesn't have native arbitrary large integers, your arguments are going to be strings representing non-negative integers, e.g.

  lastDigit("10", "10000000000");

  The kata is still as hard as the variants for Haskell or Python, don't worry.

** Code

*** Visualise the matrix of number's orders
    #+BEGIN_SRC python :results output :pp :exports both
      def simple_array():
       l = []
       for i in range(10):
	l.append([i] + [str(i**j)[-1] for j in range(10)])
       return l

      for i in simple_array():
       print(i)
    #+END_SRC

    #+RESULTS:
    #+begin_example
    [0, '1', '0', '0', '0', '0', '0', '0', '0', '0', '0']
    [1, '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']
    [2, '1', '2', '4', '8', '6', '2', '4', '8', '6', '2']
    [3, '1', '3', '9', '7', '1', '3', '9', '7', '1', '3']
    [4, '1', '4', '6', '4', '6', '4', '6', '4', '6', '4']
    [5, '1', '5', '5', '5', '5', '5', '5', '5', '5', '5']
    [6, '1', '6', '6', '6', '6', '6', '6', '6', '6', '6']
    [7, '1', '7', '9', '3', '1', '7', '9', '3', '1', '7']
    [8, '1', '8', '4', '2', '6', '8', '4', '2', '6', '8']
    [9, '1', '9', '1', '9', '1', '9', '1', '9', '1', '9']
#+end_example

*** Seeking for the sequences
    - Static are 0, 1, 5, 6
      - 0 as an order determiner has deviation from general
	rule
    - Periodic are 2, 3, 4, 7, 8, 9
      - 2: [2, 4, 6, 8]
      - 3: [3, 9, 7, 1]
      - 4: [4, 6, 4]
      - 7: [7, 9, 3, 1]
      - 8: [8, 4, 2, 6]
      - 9: [9, 1]

*** Entire meta-data
    For simplification purposes lets create a full set of rules.
      - 0: [0, 0]
      - 1: [1, 1]
      - 2: [2, 4, 6, 8]
      - 3: [3, 9, 7, 1]
      - 4: [4, 6, 4]
      - 5: [5, 5]
      - 6: [6, 6]
      - 7: [7, 9, 3, 1]
      - 8: [8, 4, 2, 6]
      - 9: [9, 1]

** TestSuite
   #+BEGIN_SRC python :results output :tangle tests/test_toy_samples.py :exports code
     import unittest
     from .. toy_tasks import order

     class TestHiddenOrder(unittest.TestCase):

         def test_simple_behaviour(self):
             self.assertEqual(order("is2 Thi1s T4est 3a"),
                              "Thi1s is2 3a T4est")
   #+END_SRC

** TestRunner
   #+BEGIN_SRC sh :results output :exports both
     python -m unittest tests/test_toy_samples.py

   #+END_SRC

   #+RESULTS:
   #+begin_example
   Traceback (most recent call last):
     File "/usr/lib/python3.4/runpy.py", line 170, in _run_module_as_main
       "__main__", mod_spec)
     File "/usr/lib/python3.4/runpy.py", line 85, in _run_code
       exec(code, run_globals)
     File "/usr/lib/python3.4/unittest/__main__.py", line 18, in <module>
       main(module=None)
     File "/usr/lib/python3.4/unittest/main.py", line 92, in __init__
       self.parseArgs(argv)
     File "/usr/lib/python3.4/unittest/main.py", line 139, in parseArgs
       self.createTests()
     File "/usr/lib/python3.4/unittest/main.py", line 146, in createTests
       self.module)
     File "/usr/lib/python3.4/unittest/loader.py", line 146, in loadTestsFromNames
       suites = [self.loadTestsFromName(name, module) for name in names]
     File "/usr/lib/python3.4/unittest/loader.py", line 146, in <listcomp>
       suites = [self.loadTestsFromName(name, module) for name in names]
     File "/usr/lib/python3.4/unittest/loader.py", line 105, in loadTestsFromName
       module = __import__('.'.join(parts_copy))
     File "/usr/local/share/DVCS/org-pub/tests/test_toy_samples.py", line 2, in <module>
       from .. toy_tasks import order
   ValueError: attempted relative import beyond top-level package
#+end_example


