#+BEGIN_EXPORT html
---
layout: post
title: Containerize 
tagline: " all tedious stuff"
permalink: /docker/biref-intro.html
categories: [literate programming]
tags: [docker, intro]
---
#+END_EXPORT

#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export

* Concept description

* Installation

* Check-up

** Version
   #+BEGIN_SRC sh
   docker --version
   #+END_SRC

   #+RESULTS:
   : Docker version 17.03.1-ce, build c6d412e

** Help
   #+BEGIN_SRC sh
   docker --help
   #+END_SRC

   #+RESULTS:
   #+begin_example

   Usage:	docker COMMAND

   A self-sufficient runtime for containers

   Options:
         --config string      Location of client config files (default "/home/antony/.docker")
     -D, --debug              Enable debug mode
         --help               Print usage
     -H, --host list          Daemon socket(s) to connect to (default [])
     -l, --log-level string   Set the logging level ("debug", "info", "warn", "error", "fatal") (default "info")
         --tls                Use TLS; implied by --tlsverify
         --tlscacert string   Trust certs signed only by this CA (default "/home/antony/.docker/ca.pem")
         --tlscert string     Path to TLS certificate file (default "/home/antony/.docker/cert.pem")
         --tlskey string      Path to TLS key file (default "/home/antony/.docker/key.pem")
         --tlsverify          Use TLS and verify the remote
     -v, --version            Print version information and quit

   Management Commands:
     container   Manage containers
     image       Manage images
     network     Manage networks
     node        Manage Swarm nodes
     plugin      Manage plugins
     secret      Manage Docker secrets
     service     Manage services
     stack       Manage Docker stacks
     swarm       Manage Swarm
     system      Manage Docker
     volume      Manage volumes

   Commands:
     attach      Attach to a running container
     build       Build an image from a Dockerfile
     commit      Create a new image from a container's changes
     cp          Copy files/folders between a container and the local filesystem
     create      Create a new container
     diff        Inspect changes to files or directories on a container's filesystem
     events      Get real time events from the server
     exec        Run a command in a running container
     export      Export a container's filesystem as a tar archive
     history     Show the history of an image
     images      List images
     import      Import the contents from a tarball to create a filesystem image
     info        Display system-wide information
     inspect     Return low-level information on Docker objects
     kill        Kill one or more running containers
     load        Load an image from a tar archive or STDIN
     login       Log in to a Docker registry
     logout      Log out from a Docker registry
     logs        Fetch the logs of a container
     pause       Pause all processes within one or more containers
     port        List port mappings or a specific mapping for the container
     ps          List containers
     pull        Pull an image or a repository from a registry
     push        Push an image or a repository to a registry
     rename      Rename a container
     restart     Restart one or more containers
     rm          Remove one or more containers
     rmi         Remove one or more images
     run         Run a command in a new container
     save        Save one or more images to a tar archive (streamed to STDOUT by default)
     search      Search the Docker Hub for images
     start       Start one or more stopped containers
     stats       Display a live stream of container(s) resource usage statistics
     stop        Stop one or more running containers
     tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
     top         Display the running processes of a container
     unpause     Unpause all processes within one or more containers
     update      Update configuration of one or more containers
     version     Show the Docker version information
     wait        Block until one or more containers stop, then print their exit codes

   Run 'docker COMMAND --help' for more information on a command.
 #+end_example

** Images

   #+BEGIN_SRC sh
   docker images
   #+END_SRC

   #+RESULTS:
   : REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
   : busybox             latest              8f0abf721946        7 days ago          1.11 MB
   : debian              latest              4793a1262e10        5 months ago        123 MB
   : hello-world         latest              d0967c81d126        5 months ago        1.84 kB
   : docker/whalesay     latest              6b362a9f73eb        2 years ago         247 MB

** Test execution

   #+BEGIN_SRC sh
   docker run busybox echo "I'm a busybox!"
   #+END_SRC

   #+RESULTS:
   : I'm a busybox!

* Simple local webapp

** Nginx launching
   
   #+BEGIN_SRC sh
   docker run -p 8000:80 nginx
   #+END_SRC

   And ensure in a [[http://localhost:8000][browser]]

** Processes

   Now when you're got nginx logs in a terminal tab, lets open a new
   one and type into it:
   #+BEGIN_SRC sh
   docker ps
   #+END_SRC

   #+RESULTS:
   : CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
   : f546a68edb8d        nginx               "nginx -g 'daemon ..."   17 minutes ago      Up 17 minutes       0.0.0.0:8000->80/tcp   compassionate_stallman

   Notice that container identificator begins from ~f546~
   
** Instance close-up

   Use the container ID for its meticulous inspection:
   #+BEGIN_SRC sh
   docker inspect f546
   #+END_SRC

   #+RESULTS:
   #+begin_example
   [
       {
           "Id": "f546a68edb8d6e240d52c1ea630d2b0474b0e5350fde3364cef4b0454d934339",
           "Created": "2017-06-24T06:41:55.894731265Z",
           "Path": "nginx",
           "Args": [
               "-g",
               "daemon off;"
           ],
           "State": {
               "Status": "running",
               "Running": true,
               "Paused": false,
               "Restarting": false,
               "OOMKilled": false,
               "Dead": false,
               "Pid": 5872,
               "ExitCode": 0,
               "Error": "",
               "StartedAt": "2017-06-24T06:41:56.457862595Z",
               "FinishedAt": "0001-01-01T00:00:00Z"
           },
           "Image": "sha256:958a7ae9e56979be256796dabd5845c704f784cd422734184999cf91f24c2547",
           "ResolvConfPath": "/var/lib/docker/containers/f546a68edb8d6e240d52c1ea630d2b0474b0e5350fde3364cef4b0454d934339/resolv.conf",
           "HostnamePath": "/var/lib/docker/containers/f546a68edb8d6e240d52c1ea630d2b0474b0e5350fde3364cef4b0454d934339/hostname",
           "HostsPath": "/var/lib/docker/containers/f546a68edb8d6e240d52c1ea630d2b0474b0e5350fde3364cef4b0454d934339/hosts",
           "LogPath": "/var/lib/docker/containers/f546a68edb8d6e240d52c1ea630d2b0474b0e5350fde3364cef4b0454d934339/f546a68edb8d6e240d52c1ea630d2b0474b0e5350fde3364cef4b0454d934339-json.log",
           "Name": "/compassionate_stallman",
           "RestartCount": 0,
           "Driver": "aufs",
           "MountLabel": "",
           "ProcessLabel": "",
           "AppArmorProfile": "",
           "ExecIDs": null,
           "HostConfig": {
               "Binds": null,
               "ContainerIDFile": "",
               "LogConfig": {
                   "Type": "json-file",
                   "Config": {}
               },
               "NetworkMode": "default",
               "PortBindings": {
                   "80/tcp": [
                       {
                           "HostIp": "",
                           "HostPort": "8000"
                       }
                   ]
               },
               "RestartPolicy": {
                   "Name": "no",
                   "MaximumRetryCount": 0
               },
               "AutoRemove": false,
               "VolumeDriver": "",
               "VolumesFrom": null,
               "CapAdd": null,
               "CapDrop": null,
               "Dns": [],
               "DnsOptions": [],
               "DnsSearch": [],
               "ExtraHosts": null,
               "GroupAdd": null,
               "IpcMode": "",
               "Cgroup": "",
               "Links": null,
               "OomScoreAdj": 0,
               "PidMode": "",
               "Privileged": false,
               "PublishAllPorts": false,
               "ReadonlyRootfs": false,
               "SecurityOpt": null,
               "UTSMode": "",
               "UsernsMode": "",
               "ShmSize": 67108864,
               "Runtime": "runc",
               "ConsoleSize": [
                   0,
                   0
               ],
               "Isolation": "",
               "CpuShares": 0,
               "Memory": 0,
               "NanoCpus": 0,
               "CgroupParent": "",
               "BlkioWeight": 0,
               "BlkioWeightDevice": null,
               "BlkioDeviceReadBps": null,
               "BlkioDeviceWriteBps": null,
               "BlkioDeviceReadIOps": null,
               "BlkioDeviceWriteIOps": null,
               "CpuPeriod": 0,
               "CpuQuota": 0,
               "CpuRealtimePeriod": 0,
               "CpuRealtimeRuntime": 0,
               "CpusetCpus": "",
               "CpusetMems": "",
               "Devices": [],
               "DiskQuota": 0,
               "KernelMemory": 0,
               "MemoryReservation": 0,
               "MemorySwap": 0,
               "MemorySwappiness": -1,
               "OomKillDisable": null,
               "PidsLimit": 0,
               "Ulimits": null,
               "CpuCount": 0,
               "CpuPercent": 0,
               "IOMaximumIOps": 0,
               "IOMaximumBandwidth": 0
           },
           "GraphDriver": {
               "Name": "aufs",
               "Data": null
           },
           "Mounts": [],
           "Config": {
               "Hostname": "f546a68edb8d",
               "Domainname": "",
               "User": "",
               "AttachStdin": false,
               "AttachStdout": true,
               "AttachStderr": true,
               "ExposedPorts": {
                   "80/tcp": {}
               },
               "Tty": false,
               "OpenStdin": false,
               "StdinOnce": false,
               "Env": [
                   "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                   "NGINX_VERSION=1.13.1-1~stretch",
                   "NJS_VERSION=1.13.1.0.1.10-1~stretch"
               ],
               "Cmd": [
                   "nginx",
                   "-g",
                   "daemon off;"
               ],
               "ArgsEscaped": true,
               "Image": "nginx",
               "Volumes": null,
               "WorkingDir": "",
               "Entrypoint": null,
               "OnBuild": null,
               "Labels": {},
               "StopSignal": "SIGTERM"
           },
           "NetworkSettings": {
               "Bridge": "",
               "SandboxID": "2a56aa540231508a5ae0447c0be9f1d1bd50c641b02627971958ce7391c8a416",
               "HairpinMode": false,
               "LinkLocalIPv6Address": "",
               "LinkLocalIPv6PrefixLen": 0,
               "Ports": {
                   "80/tcp": [
                       {
                           "HostIp": "0.0.0.0",
                           "HostPort": "8000"
                       }
                   ]
               },
               "SandboxKey": "/var/run/docker/netns/2a56aa540231",
               "SecondaryIPAddresses": null,
               "SecondaryIPv6Addresses": null,
               "EndpointID": "95ecd07b285893afb44dcbf05c2d4612520af5fa4fe7f0ab6db51fc635d0d3b0",
               "Gateway": "172.17.0.1",
               "GlobalIPv6Address": "",
               "GlobalIPv6PrefixLen": 0,
               "IPAddress": "172.17.0.2",
               "IPPrefixLen": 16,
               "IPv6Gateway": "",
               "MacAddress": "02:42:ac:11:00:02",
               "Networks": {
                   "bridge": {
                       "IPAMConfig": null,
                       "Links": null,
                       "Aliases": null,
                       "NetworkID": "7bc9f6c5809afb954741056586c3406bc468be3da03b8c8b7af5a39da48f62a8",
                       "EndpointID": "95ecd07b285893afb44dcbf05c2d4612520af5fa4fe7f0ab6db51fc635d0d3b0",
                       "Gateway": "172.17.0.1",
                       "IPAddress": "172.17.0.2",
                       "IPPrefixLen": 16,
                       "IPv6Gateway": "",
                       "GlobalIPv6Address": "",
                       "GlobalIPv6PrefixLen": 0,
                       "MacAddress": "02:42:ac:11:00:02"
                   }
               }
           }
       }
   ]
#+end_example

** Ping the container

   Now, when we know ~container ip~ it is possible to ping it:
   #+BEGIN_SRC sh
   ping -c 5 172.17.0.2
   #+END_SRC

   #+RESULTS:
   #+begin_example
   PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.
   64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.111 ms
   64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.166 ms
   64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.199 ms
   64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.180 ms
   64 bytes from 172.17.0.2: icmp_seq=5 ttl=64 time=0.168 ms

   --- 172.17.0.2 ping statistics ---
   5 packets transmitted, 5 received, 0% packet loss, time 3998ms
   rtt min/avg/max/mdev = 0.111/0.164/0.199/0.033 ms
#+end_example
** Container halt

   By typing =C-c C-c=
