#+BEGIN_EXPORT html
---
layout: post
title: Containerize 
tagline: " all tedious stuff"
permalink: /docker/biref-intro.html
categories: [literate programming]
tags: [docker, intro]
---
#+END_EXPORT

#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export

* Concept description

  The purpose of following below is to unveil few questions about
  =Docker= Eco-system.

* Installation

  Seems like all you need is to follow up through the comprehensive
  manual from [[https://docs.docker.com/install/linux/docker-ce/#set-up-the-repository][the official site]].

* Check-up

** Version
   #+BEGIN_SRC sh
   docker --version
   #+END_SRC

   #+RESULTS:
   : Docker version 17.12.0-ce, build c97c6d6

** Help
   #+BEGIN_SRC sh
   docker --help
   #+END_SRC

   #+RESULTS:
   #+begin_example

   Usage:	docker COMMAND

   A self-sufficient runtime for containers

   Options:
         --config string      Location of client config files (default "/home/antony/.docker")
     -D, --debug              Enable debug mode
         --help               Print usage
     -H, --host list          Daemon socket(s) to connect to (default [])
     -l, --log-level string   Set the logging level ("debug", "info", "warn", "error", "fatal") (default "info")
         --tls                Use TLS; implied by --tlsverify
         --tlscacert string   Trust certs signed only by this CA (default "/home/antony/.docker/ca.pem")
         --tlscert string     Path to TLS certificate file (default "/home/antony/.docker/cert.pem")
         --tlskey string      Path to TLS key file (default "/home/antony/.docker/key.pem")
         --tlsverify          Use TLS and verify the remote
     -v, --version            Print version information and quit

   Management Commands:
     container   Manage containers
     image       Manage images
     network     Manage networks
     node        Manage Swarm nodes
     plugin      Manage plugins
     secret      Manage Docker secrets
     service     Manage services
     stack       Manage Docker stacks
     swarm       Manage Swarm
     system      Manage Docker
     volume      Manage volumes

   Commands:
     attach      Attach to a running container
     build       Build an image from a Dockerfile
     commit      Create a new image from a container's changes
     cp          Copy files/folders between a container and the local filesystem
     create      Create a new container
     diff        Inspect changes to files or directories on a container's filesystem
     events      Get real time events from the server
     exec        Run a command in a running container
     export      Export a container's filesystem as a tar archive
     history     Show the history of an image
     images      List images
     import      Import the contents from a tarball to create a filesystem image
     info        Display system-wide information
     inspect     Return low-level information on Docker objects
     kill        Kill one or more running containers
     load        Load an image from a tar archive or STDIN
     login       Log in to a Docker registry
     logout      Log out from a Docker registry
     logs        Fetch the logs of a container
     pause       Pause all processes within one or more containers
     port        List port mappings or a specific mapping for the container
     ps          List containers
     pull        Pull an image or a repository from a registry
     push        Push an image or a repository to a registry
     rename      Rename a container
     restart     Restart one or more containers
     rm          Remove one or more containers
     rmi         Remove one or more images
     run         Run a command in a new container
     save        Save one or more images to a tar archive (streamed to STDOUT by default)
     search      Search the Docker Hub for images
     start       Start one or more stopped containers
     stats       Display a live stream of container(s) resource usage statistics
     stop        Stop one or more running containers
     tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
     top         Display the running processes of a container
     unpause     Unpause all processes within one or more containers
     update      Update configuration of one or more containers
     version     Show the Docker version information
     wait        Block until one or more containers stop, then print their exit codes

   Run 'docker COMMAND --help' for more information on a command.
 #+end_example

** Images

   #+BEGIN_SRC sh
   docker images
   #+END_SRC

   #+RESULTS:
   : REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
   : hello-world         latest              1815c82652c0        2 years ago         1.84kB

** Test execution

   #+BEGIN_SRC sh
   docker run hello-world
   #+END_SRC

   #+RESULTS:
   #+begin_example

   Hello from Docker!
   This message shows that your installation appears to be working correctly.

   To generate this message, Docker took the following steps:
    1. The Docker client contacted the Docker daemon.
    2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    3. The Docker daemon created a new container from that image which runs the
       executable that produces the output you are currently reading.
    4. The Docker daemon streamed that output to the Docker client, which sent it
       to your terminal.

   To try something more ambitious, you can run an Ubuntu container with:
    $ docker run -it ubuntu bash

   Share images, automate workflows, and more with a free Docker ID:
    https://cloud.docker.com/

   For more examples and ideas, visit:
    https://docs.docker.com/engine/userguide/

   #+end_example

** Busy box                                                        :noexport:
   #+BEGIN_SRC sh
   docker run busybox echo "I'm a busybox!"
   #+END_SRC

   #+RESULTS:
   : Unable to find image 'busybox:latest' locally
   : latest: Pulling from library/busybox
   : 8e674ad76dce: Pulling fs layer
   : 8e674ad76dce: Verifying Checksum
   : 8e674ad76dce: Download complete
   : 8e674ad76dce: Pull complete
   : Digest: sha256:c94cf1b87ccb80f2e6414ef913c748b105060debda482058d2b8d0fce39f11b9
   : Status: Downloaded newer image for busybox:latest
   : I'm a busybox!

* Simple local webapp                                              :noexport:

** Nginx launching
   
   #+BEGIN_SRC sh
   docker run -p 8000:80 nginx
   #+END_SRC

   And ensure in a [[http://localhost:8000][browser]]

** Processes

   Now when you're got nginx logs in a terminal tab, lets open a new
   one and type into it:
   #+BEGIN_SRC sh
   docker ps
   #+END_SRC

   #+RESULTS:
   : CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
   : f546a68edb8d        nginx               "nginx -g 'daemon ..."   17 minutes ago      Up 17 minutes       0.0.0.0:8000->80/tcp   compassionate_stallman

   Notice that container identificator begins from ~f546~
   
** Instance close-up

   Use the container ID for its meticulous inspection:
   #+BEGIN_SRC sh
   docker inspect f546
   #+END_SRC

   #+RESULTS:
   #+begin_example
   [
       {
           "Id": "f546a68edb8d6e240d52c1ea630d2b0474b0e5350fde3364cef4b0454d934339",
           "Created": "2017-06-24T06:41:55.894731265Z",
           "Path": "nginx",
           "Args": [
               "-g",
               "daemon off;"
           ],
           "State": {
               "Status": "running",
               "Running": true,
               "Paused": false,
               "Restarting": false,
               "OOMKilled": false,
               "Dead": false,
               "Pid": 5872,
               "ExitCode": 0,
               "Error": "",
               "StartedAt": "2017-06-24T06:41:56.457862595Z",
               "FinishedAt": "0001-01-01T00:00:00Z"
           },
           "Image": "sha256:958a7ae9e56979be256796dabd5845c704f784cd422734184999cf91f24c2547",
           "ResolvConfPath": "/var/lib/docker/containers/f546a68edb8d6e240d52c1ea630d2b0474b0e5350fde3364cef4b0454d934339/resolv.conf",
           "HostnamePath": "/var/lib/docker/containers/f546a68edb8d6e240d52c1ea630d2b0474b0e5350fde3364cef4b0454d934339/hostname",
           "HostsPath": "/var/lib/docker/containers/f546a68edb8d6e240d52c1ea630d2b0474b0e5350fde3364cef4b0454d934339/hosts",
           "LogPath": "/var/lib/docker/containers/f546a68edb8d6e240d52c1ea630d2b0474b0e5350fde3364cef4b0454d934339/f546a68edb8d6e240d52c1ea630d2b0474b0e5350fde3364cef4b0454d934339-json.log",
           "Name": "/compassionate_stallman",
           "RestartCount": 0,
           "Driver": "aufs",
           "MountLabel": "",
           "ProcessLabel": "",
           "AppArmorProfile": "",
           "ExecIDs": null,
           "HostConfig": {
               "Binds": null,
               "ContainerIDFile": "",
               "LogConfig": {
                   "Type": "json-file",
                   "Config": {}
               },
               "NetworkMode": "default",
               "PortBindings": {
                   "80/tcp": [
                       {
                           "HostIp": "",
                           "HostPort": "8000"
                       }
                   ]
               },
               "RestartPolicy": {
                   "Name": "no",
                   "MaximumRetryCount": 0
               },
               "AutoRemove": false,
               "VolumeDriver": "",
               "VolumesFrom": null,
               "CapAdd": null,
               "CapDrop": null,
               "Dns": [],
               "DnsOptions": [],
               "DnsSearch": [],
               "ExtraHosts": null,
               "GroupAdd": null,
               "IpcMode": "",
               "Cgroup": "",
               "Links": null,
               "OomScoreAdj": 0,
               "PidMode": "",
               "Privileged": false,
               "PublishAllPorts": false,
               "ReadonlyRootfs": false,
               "SecurityOpt": null,
               "UTSMode": "",
               "UsernsMode": "",
               "ShmSize": 67108864,
               "Runtime": "runc",
               "ConsoleSize": [
                   0,
                   0
               ],
               "Isolation": "",
               "CpuShares": 0,
               "Memory": 0,
               "NanoCpus": 0,
               "CgroupParent": "",
               "BlkioWeight": 0,
               "BlkioWeightDevice": null,
               "BlkioDeviceReadBps": null,
               "BlkioDeviceWriteBps": null,
               "BlkioDeviceReadIOps": null,
               "BlkioDeviceWriteIOps": null,
               "CpuPeriod": 0,
               "CpuQuota": 0,
               "CpuRealtimePeriod": 0,
               "CpuRealtimeRuntime": 0,
               "CpusetCpus": "",
               "CpusetMems": "",
               "Devices": [],
               "DiskQuota": 0,
               "KernelMemory": 0,
               "MemoryReservation": 0,
               "MemorySwap": 0,
               "MemorySwappiness": -1,
               "OomKillDisable": null,
               "PidsLimit": 0,
               "Ulimits": null,
               "CpuCount": 0,
               "CpuPercent": 0,
               "IOMaximumIOps": 0,
               "IOMaximumBandwidth": 0
           },
           "GraphDriver": {
               "Name": "aufs",
               "Data": null
           },
           "Mounts": [],
           "Config": {
               "Hostname": "f546a68edb8d",
               "Domainname": "",
               "User": "",
               "AttachStdin": false,
               "AttachStdout": true,
               "AttachStderr": true,
               "ExposedPorts": {
                   "80/tcp": {}
               },
               "Tty": false,
               "OpenStdin": false,
               "StdinOnce": false,
               "Env": [
                   "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                   "NGINX_VERSION=1.13.1-1~stretch",
                   "NJS_VERSION=1.13.1.0.1.10-1~stretch"
               ],
               "Cmd": [
                   "nginx",
                   "-g",
                   "daemon off;"
               ],
               "ArgsEscaped": true,
               "Image": "nginx",
               "Volumes": null,
               "WorkingDir": "",
               "Entrypoint": null,
               "OnBuild": null,
               "Labels": {},
               "StopSignal": "SIGTERM"
           },
           "NetworkSettings": {
               "Bridge": "",
               "SandboxID": "2a56aa540231508a5ae0447c0be9f1d1bd50c641b02627971958ce7391c8a416",
               "HairpinMode": false,
               "LinkLocalIPv6Address": "",
               "LinkLocalIPv6PrefixLen": 0,
               "Ports": {
                   "80/tcp": [
                       {
                           "HostIp": "0.0.0.0",
                           "HostPort": "8000"
                       }
                   ]
               },
               "SandboxKey": "/var/run/docker/netns/2a56aa540231",
               "SecondaryIPAddresses": null,
               "SecondaryIPv6Addresses": null,
               "EndpointID": "95ecd07b285893afb44dcbf05c2d4612520af5fa4fe7f0ab6db51fc635d0d3b0",
               "Gateway": "172.17.0.1",
               "GlobalIPv6Address": "",
               "GlobalIPv6PrefixLen": 0,
               "IPAddress": "172.17.0.2",
               "IPPrefixLen": 16,
               "IPv6Gateway": "",
               "MacAddress": "02:42:ac:11:00:02",
               "Networks": {
                   "bridge": {
                       "IPAMConfig": null,
                       "Links": null,
                       "Aliases": null,
                       "NetworkID": "7bc9f6c5809afb954741056586c3406bc468be3da03b8c8b7af5a39da48f62a8",
                       "EndpointID": "95ecd07b285893afb44dcbf05c2d4612520af5fa4fe7f0ab6db51fc635d0d3b0",
                       "Gateway": "172.17.0.1",
                       "IPAddress": "172.17.0.2",
                       "IPPrefixLen": 16,
                       "IPv6Gateway": "",
                       "GlobalIPv6Address": "",
                       "GlobalIPv6PrefixLen": 0,
                       "MacAddress": "02:42:ac:11:00:02"
                   }
               }
           }
       }
   ]
#+end_example

** Ping the container

   Now, when we know ~container ip~ it is possible to ping it:
   #+BEGIN_SRC sh
   ping -c 5 172.17.0.2
   #+END_SRC

   #+RESULTS:
   #+begin_example
   PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.
   64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.111 ms
   64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.166 ms
   64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.199 ms
   64 bytes from 172.17.0.2: icmp_seq=4 ttl=64 time=0.180 ms
   64 bytes from 172.17.0.2: icmp_seq=5 ttl=64 time=0.168 ms

   --- 172.17.0.2 ping statistics ---
   5 packets transmitted, 5 received, 0% packet loss, time 3998ms
   rtt min/avg/max/mdev = 0.111/0.164/0.199/0.033 ms
#+end_example
** Container halt

   By typing =C-c C-c=

* Redis official image                                             :noexport:

** Search
   #+BEGIN_SRC sh
   docker search redis
   #+END_SRC

   #+RESULTS:
   #+begin_example
   NAME                      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
   redis                     Redis is an open source key-value store th...   3886      [OK]       
   sameersbn/redis                                                           54                   [OK]
   bitnami/redis             Bitnami Redis Docker Image                      50                   [OK]
   torusware/speedus-redis   Always updated official Redis docker image...   32                   [OK]
   webhippie/redis           Docker images for redis                         7                    [OK]
   anapsix/redis             11MB Redis server image over AlpineLinux        6                    [OK]
   williamyeh/redis          Redis image for Docker                          3                    [OK]
   clue/redis-benchmark      A minimal docker image to ease running the...   3                    [OK]
   abzcoding/tomcat-redis    a tomcat container with redis as session m...   2                    [OK]
   unblibraries/redis        Leverages phusion/baseimage to deploy a ba...   2                    [OK]
   greytip/redis             redis 3.0.3                                     1                    [OK]
   frodenas/redis            A Docker Image for Redis                        1                    [OK]
   xataz/redis               Light redis image                               1                    [OK]
   miko2u/redis              Redis                                           1                    [OK]
   nanobox/redis             Redis service for nanobox.io                    0                    [OK]
   cloudposse/redis          Standalone redis service                        0                    [OK]
   yfix/redis                Yfix docker redis                               0                    [OK]
   continuouspipe/redis      Redis                                           0                    [OK]
   appelgriebsch/redis       Configurable redis container based on Alpi...   0                    [OK]
   maestrano/redis           Redis is an open source key-value store th...   0                    [OK]
   higebu/redis-commander    Redis Commander Docker image. https://gith...   0                    [OK]
   trelllis/redis            Redis Primary                                   0                    [OK]
   drupaldocker/redis        Redis for Drupal                                0                    [OK]
   watsco/redis              Watsco redis base                               0                    [OK]
   maxird/redis              Redis                                           0                    [OK]
#+end_example

** Search options
   #+BEGIN_SRC sh
   docker search --help
   #+END_SRC

   #+RESULTS:
   #+begin_example

   Usage:	docker search [OPTIONS] TERM

   Search the Docker Hub for images

   Options:
     -f, --filter filter   Filter output based on conditions provided
         --help            Print usage
         --limit int       Max number of search results (default 25)
         --no-trunc        Don't truncate output
#+end_example

** Pull
   #+BEGIN_SRC sh
   docker pull redis
   #+END_SRC

   #+RESULTS:
   #+begin_example
   Using default tag: latest
   latest: Pulling from library/redis
   f5cc0ee7a6f6: Pulling fs layer
   5fc25ed18e87: Pulling fs layer
   e025bc8872f6: Pulling fs layer
   0d8edb7c8bd1: Pulling fs layer
   654cb9d60232: Pulling fs layer
   44888ef53075: Pulling fs layer
   654cb9d60232: Waiting
   44888ef53075: Waiting
   0d8edb7c8bd1: Waiting
   e025bc8872f6: Download complete
   654cb9d60232: Verifying Checksum
   654cb9d60232: Download complete
   44888ef53075: Download complete
   0d8edb7c8bd1: Verifying Checksum
   0d8edb7c8bd1: Download complete
   f5cc0ee7a6f6: Download complete
   f5cc0ee7a6f6: Pull complete
   5fc25ed18e87: Pull complete
   e025bc8872f6: Pull complete
   0d8edb7c8bd1: Pull complete
   654cb9d60232: Pull complete
   44888ef53075: Pull complete
   Digest: sha256:4e2af5470298aa3c79fba07216f0245fff5278b66f40681cf448eabca0bb966b
   Status: Downloaded newer image for redis:latest
#+end_example

** Inspect
   #+BEGIN_SRC sh
   docker inspect redis
   #+END_SRC

   #+RESULTS:
   #+begin_example
   [
       {
           "Id": "sha256:4e482b286430fc5abed4cd26965ef200c59b727739919489d9ba42d5c361576c",
           "RepoTags": [
               "redis:latest"
           ],
           "RepoDigests": [
               "redis@sha256:4e2af5470298aa3c79fba07216f0245fff5278b66f40681cf448eabca0bb966b"
           ],
           "Parent": "",
           "Comment": "",
           "Created": "2017-06-23T05:48:12.360604857Z",
           "Container": "8192875e4177261796f2e1ade286f9ace2f2ec3cd0a306737c8b2df840c255bc",
           "ContainerConfig": {
               "Hostname": "40a0c0f8b2f7",
               "Domainname": "",
               "User": "",
               "AttachStdin": false,
               "AttachStdout": false,
               "AttachStderr": false,
               "ExposedPorts": {
                   "6379/tcp": {}
               },
               "Tty": false,
               "OpenStdin": false,
               "StdinOnce": false,
               "Env": [
                   "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                   "GOSU_VERSION=1.10",
                   "REDIS_VERSION=3.2.9",
                   "REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-3.2.9.tar.gz",
                   "REDIS_DOWNLOAD_SHA=6eaacfa983b287e440d0839ead20c2231749d5d6b78bbe0e0ffa3a890c59ff26"
               ],
               "Cmd": [
                   "/bin/sh",
                   "-c",
                   "#(nop) ",
                   "CMD [\"redis-server\"]"
               ],
               "ArgsEscaped": true,
               "Image": "sha256:d5b0d131d2b9f60cf036f54e27c97de3cbda19979b6ef039061df7b11e80b9cc",
               "Volumes": {
                   "/data": {}
               },
               "WorkingDir": "/data",
               "Entrypoint": [
                   "docker-entrypoint.sh"
               ],
               "OnBuild": [],
               "Labels": {}
           },
           "DockerVersion": "17.03.1-ce",
           "Author": "",
           "Config": {
               "Hostname": "40a0c0f8b2f7",
               "Domainname": "",
               "User": "",
               "AttachStdin": false,
               "AttachStdout": false,
               "AttachStderr": false,
               "ExposedPorts": {
                   "6379/tcp": {}
               },
               "Tty": false,
               "OpenStdin": false,
               "StdinOnce": false,
               "Env": [
                   "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                   "GOSU_VERSION=1.10",
                   "REDIS_VERSION=3.2.9",
                   "REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-3.2.9.tar.gz",
                   "REDIS_DOWNLOAD_SHA=6eaacfa983b287e440d0839ead20c2231749d5d6b78bbe0e0ffa3a890c59ff26"
               ],
               "Cmd": [
                   "redis-server"
               ],
               "ArgsEscaped": true,
               "Image": "sha256:d5b0d131d2b9f60cf036f54e27c97de3cbda19979b6ef039061df7b11e80b9cc",
               "Volumes": {
                   "/data": {}
               },
               "WorkingDir": "/data",
               "Entrypoint": [
                   "docker-entrypoint.sh"
               ],
               "OnBuild": [],
               "Labels": {}
           },
           "Architecture": "amd64",
           "Os": "linux",
           "Size": 98969736,
           "VirtualSize": 98969736,
           "GraphDriver": {
               "Name": "aufs",
               "Data": null
           },
           "RootFS": {
               "Type": "layers",
               "Layers": [
                   "sha256:d08535b0996bcfbc19d5cc21f01813115dda20e6fdf43bd29e19a8038bc76cf6",
                   "sha256:74072b982a3d85ef4ab02792808db47aec546d972c8cbc564b835c3fc27b1c11",
                   "sha256:13964fab05984c7879450d90ce4efa53d19acd19033c80d00a3cc1aee8bef2cf",
                   "sha256:6f223f268efe8c0be9e665b65016c3a0f6dd8c1a3a03c40117f3e1ef4e7928ab",
                   "sha256:d9fe002e0a416f0c6f231a853a9c8a7bedd2dacf8d0c7190be0ff78691e76d12",
                   "sha256:23e630c4c6552a4d166ba35b2b89e3560e7c3822df556238f89106873f46d6d3"
               ]
           }
       }
   ]
#+end_example
