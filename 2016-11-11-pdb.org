#+BEGIN_HTML
---
layout: post
title: Debug Python programs
tagline: " by means of Emacs' toolbox"
permalink: /tips-and-tricks/debug-python-with-emacs.html
categories: [literate programming, Python, debugging, emacs]
tags: [pdb, ipdb, GDB, GUD]
---
#+END_HTML
#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2

* Preamble
  #+BEGIN_QUOTE
  The GUD (Grand Unified Debugger) library provides an Emacs interface to
  a wide variety of symbolic debuggers.  It can run the GNU Debugger
  (GDB), as well as DBX, SDB, XDB, Perlâ€™s debugging mode, the Python
  debugger PDB, and the Java Debugger JDB.

  /[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html][source]]/
  #+END_QUOTE
* Test fixture
  For our dissection lets create a primitive =Python= program:
  #+BEGIN_SRC python :results none :session stdlib :exports code :tangle tests/test_gud.py
    l = []
    for i in range(10):
        a = i**3
        print(a)
        l.append(a)
    print(l)
  #+END_SRC

  -----
  #+BEGIN_VERSE
  *Tip* Use =C-c C-v t= to generate /(tangle)/ the test file
  #+END_VERSE
  -----
* Sample usage
  Just type =M-x pdb= and define a script to debug: =tests/test_gud.py=
* Conclusion
