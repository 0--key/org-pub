#+BEGIN_HTML
---
layout: post
title: Write Python programs
tagline: " in OOP manner"
permalink: /python/oop-modeling.html
categories: [literate programming, Python, object-oriented-programming, emacs]
tags: [coding, algorithms, oop]
---
#+END_HTML
#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2

* It is a contemporary and effective craft-writing
  But, for a little while as much of stuff around us. As a corner case of object-oriented programming
  it would be nice to define where it is evil to use it.

** It is silly
   - To take challenge and write in OOP manner for 10 or less objects.
   - In addition you restricted to consider about the number of iteration your code snippet.
     Sometimes it might be conscious and sober to try just /prototype/ your function. Even
     it is obvious - the raw model should disclose many of hidden niceties about how things
     work separately.


** The good practice
   - Long-run projects with active code evolution. If it is a true development it is obligation
     to following through scalability path only. And OOP itself allows you to forget about limits
     in computation. There are millions items inside your Python are the real number for large
     application.
   - Strict and narrow object's relations is a huge necessary component. Branches, trees and even
     leaves are typical reproducible structures.


* Samples

** Inheritance from the parent class general sample:
   #+BEGIN_SRC python :results output
     class InitialClass(object):

         def __init__(self):
             self.attr1 = 'one'
             self.attr2 = 'two'

     class InheritedClass(InitialClass):

         def __init__(self):
             self.attr3 = 'three'
             # strict inheritance
             # InitialClass.__init__(self)
             # relative inheritance
             super(InheritedClass, self).__init__()


         @staticmethod
         def somemethod():
             """It's just for illustration"""
             print('the method')


     a = InheritedClass()

     for each in a.__dict__:
         print(each)
     a.somemethod()
   #+END_SRC

   #+RESULTS:
   : attr2
   : attr1
   : attr3
   : the method

   As you might noticed several attributes ~a~ inherited out from two
   classes. And in general case it allows you to extend your initial
   class by addition some new attributes or even functions.

** Grocery store
   For educational purposes it would be huge explicitly to check-up
   all existing OOP features. Lets compose our dissection around a
   much trivial and perhaps naive sample out of our routine life. Hope you
   are rarely buy something useful in the grocery on the corner, thus
   it is just a working sample how it might described in the new definitions.

*** Persons
    Of cause they are. And if we started to talk about them, we restricted
    to describe their attributes and functions as precise as it possible
    to do.

**** Primitive sample with relative inheritance
     Our first code snippet demonstrates a /general concept/ of extension
     by inheritance. The task of OOP modeling in that case was completed
     by utilizing the /strict inheritance/ feature, when ~child~ inherited
     the particular method out from particular named class. It works perfectly
     and sometimes it would be replaced with /relative inheritance/ which
     based on /relative position/ of classes, not on their names.

     It is handy to do sometimes if you want to simplify your task in
     code re-factoring.

     As you might choose already, this feature solved using ~super()~
     built-in function.
     #+BEGIN_SRC python :results output
       class Person(object):

           def __init__(self, name):
               self.name = name

       class Customer(Person):
           def __init__(self, name, deposit):
               # the old-fashion manner
               # super(Customer, self).__init__(name)
               # *Python3* approach
               super().__init__(name)
               self.deposit = deposit


       a = Customer(name='John', deposit=123)
       print(a.deposit, a.name)
     #+END_SRC

     #+RESULTS:
     : 123 John

**** Complicated sample with *args, **kwargs inheritance
     As you're noticed now it is possible to pass arguments directly
     from the child-class object to its parent. It is a great thing to
     do and most of your job around OOP should be around passing the
     arguments in this direction. The previous code snippet do it in
     a bit over-explicit way: it just pass them by theirs names.

     *But* what if you're decided to simplify your task and pass /all arguments/
     in a butch manner?
     
     This is a full-fledged sample thus the most of complex OOP solutions
     are implemented with ~super()~ built-in:
     #+BEGIN_SRC python :results output
       class Person(object):

           def __init__(self, *args, **kwargs):
               self.interval = [args[0], args[1]]
               self.name = kwargs['name']

       class Customer(Person):

           def __init__(self, *args, **kwargs):
               super(Customer, self).__init__(*args, **kwargs)
               self.deposit = kwargs['deposit']


       a = Customer(7, 22, name='John', deposit=123)
       print(a.deposit, a.name, a.interval)
     #+END_SRC

     #+RESULTS:
     : 123 John [7, 22]

**** Particular case of complete overwritten method
     and _no inheritance at all_. Sometimes the child class /must have/ a
     completely different attributes or even behavior. In this case
     you'll just omit the ~super()~ built-in function like on example
     below:
     #+BEGIN_SRC python :results output
       class Person(object):
           def __init__(self, **kwargs):
               self.name = kwargs['name']
               self.deposit = kwargs['deposit']

       class Customer(Person):
           def __init__(self, **kwargs):
               # super(Customer, self).__init__(**kwargs)
               self.age = kwargs['age']


       a = Customer(name='John', deposit=123, age=22)
       print(a.age)
       try:
           print(a.deposit)
       except AttributeError:
           print("Deposit not inherited form the person's class")
     #+END_SRC

     #+RESULTS:
     : 22
     : Deposit not inherited form the person's class

     
*** Meal

*** Basket

*** Payments

** Pine forest

*** Trees

*** Area

*** Population


* Conclusion
   
