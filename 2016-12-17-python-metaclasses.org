#+BEGIN_HTML
---
layout: post
title: Python metaclass
tagline: " as class factory"
permalink: /python/metaclass.html
categories: [literate programming, Python, object-oriented-programming, emacs]
tags: [metaclass, gist, oop]
---
#+END_HTML
#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2

* Definition
  
  #+BEGIN_QUOTE
    Metaclasses are deeper magic that 99% of users should never worry about.
    If you wonder whether you need them, you don't (the people who actually
    need them know with certainty that they need them, and don't need an
    explanation about why).
    #+BEGIN_HTML
    <p align="right">
    Python Guru Tim Peters
    </p>
    #+END_HTML
    -----
    Python rightfully prides itself as a relatively straightforward language without a
    lot of "magic" hiding in its workings and features. Sometimes, however, to make
    interesting abstractions possible, one can dig deep in Python's more dusty and obscure
    corners to find language constructs that are a bit more magical than usual.
    Metaclasses are one such feature.
    #+BEGIN_HTML
    <p align="right">
    <a href="http://eli.thegreenplace.net/2011/08/14/python-metaclasses-by-example/">
    Eli Bendersky</a>
    </p>
    #+END_HTML
    -----
    A metaclass is most commonly used as a class-factory.
  #+END_QUOTE

* Classes are obects too
  And it is possible to generate them on the fly:
  #+BEGIN_SRC python :results silent :session meta :exports both
    def make_sample_class(**kw):
        return type('DemoClass', (object,), dict(**kw))
  #+END_SRC

  Built-in function =type= produce a ~DemoClass~ blueprint. Lets
  compose the class itself:

  #+BEGIN_SRC python :results output :session meta :exports both
    sample_class = make_sample_class(a=1, b=2)
    print(type(sample_class))
    #+END_SRC

  #+RESULTS:
  : 
  : <class 'type'>

  And now it is time to generate a particular instance:
  
  #+BEGIN_SRC python :results output :session meta :exports both
    instance = sample_class()
    print(type(instance))
    print("This is an instance's properties a: %s and b: %s " % 
          (instance.a, instance.b))
  #+END_SRC

  #+RESULTS:
  : 
  : <class '__main__.DemoClass'>
  : ... This is an instance's properties a: 1 and b: 2

* The class of a class
* Metaclass
* Metaclass's __new__ and __init__
* Metaclass's __call__

* Examples

** Trivial

*** string.Template

** Sophisticated

** Complex

** Full-fledged
