#+BEGIN_EXPORT html
---
layout: post
title: Python metaclass
tagline: " as class factory"
permalink: /python/metaclass.html
categories: [literate programming, Python, object-oriented-programming, emacs]
tags: [metaclass, gist, oop]
---
#+END_EXPORT

#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :session meta

* Definition
  
  #+BEGIN_QUOTE
    Metaclasses are deeper magic that 99% of users should never worry about.
    If you wonder whether you need them, you don't (the people who actually
    need them know with certainty that they need them, and don't need an
    explanation about why).
    #+BEGIN_EXPORT html
    <p align="right">
    Python Guru Tim Peters
    </p>
    #+END_EXPORT
    -----
    Python rightfully prides itself as a relatively straightforward language without a
    lot of "magic" hiding in its workings and features. Sometimes, however, to make
    interesting abstractions possible, one can dig deep in Python's more dusty and obscure
    corners to find language constructs that are a bit more magical than usual.
    Metaclasses are one such feature.
    #+BEGIN_EXPORT html
    <p align="right">
    <a href="http://eli.thegreenplace.net/2011/08/14/python-metaclasses-by-example/">
    Eli Bendersky</a>
    </p>
    #+END_EXPORT
    -----
    A metaclass is most commonly used as a class-factory.
    -----
    *What Is a Metaclass?*

    Metaclasses do not mean “deep, dark black magic”. When you execute any
    class statement, Python performs the following steps:

    - Remember the class name as a string, say n , and the class bases
      as a tuple, say b
    - Execute the body of the class, recording all names that the
      body binds as keys in a new dictionary d , each with its associated
      value (e.g., each statement such as def f(self) just sets d['f'] to
      the function object the def statement builds).
    - Determine the appropriate metaclass, say M , by inheritance or by
      looking for name
    =__metaclass__= in d and in the globals: if '__metaclass__' in d: M =
    d['__metaclass__'] elif b: M = type(b[0]) elif '__metaclass__' in
    globals( ): M = globals( )['__metaclass__'] else: M = types.ClassType
    types.ClassType is the metaclass of old-style classes, so this code
    implies that a class without bases is old style if the name
    '__metaclass__' is not set in the class body nor among the global
    variables of the current module. 4. Call M(n, b, d) and record the
    result as a variable with name n in whatever scope the class statement
    executed. So, some metaclass M is always involved in the execution of
    any class statement. The metaclass is normally type for new-style
    classes, types.ClassType for old-style classes. You can set it up to
    use your own custom metaclass (normally a subclass of type ), and that
    is where you may reasonably feel that things are getting a bit too
    advanced. How- ever, understanding that a class statement, such as:
    class Someclass(Somebase): __metaclass__ = type x = 23 is exactly
    equivalent to the assignment statement: Someclass = type('Someclass',
    (Somebase,), {'x': 23}) does help a lot in understanding the exact
    semantics of the class statement.

    http://shop.oreilly.com/product/9780596007973.do

  #+END_QUOTE

* Classes are obects too
  And it is possible to generate them on the fly:
  #+BEGIN_SRC python :results silent
    def make_sample_class(**kw):
        return type('DemoClass', (object,), dict(**kw))
  #+END_SRC

  Built-in function =type= produce a ~DemoClass~ blueprint. Lets
  compose the class itself:

  #+BEGIN_SRC python
    sample_class = make_sample_class(a=1, b=2)
    print(type(sample_class))
    #+END_SRC

  #+RESULTS:
  : 
  : <class 'type'>

  And now it is time to generate a particular instance:
  
  #+BEGIN_SRC python
    instance = sample_class()
    print(type(instance))
    print("This is an instance's properties a: %s and b: %s " % 
          (instance.a, instance.b))
  #+END_SRC

  #+RESULTS:
  : 
  : <class '__main__.DemoClass'>
  : ... This is an instance's properties a: 1 and b: 2

* The class of a class
  #+BEGIN_QUOTE
  Every object (including built-ins) in Python has a class. We've
  just seen that classes are objects too, so classes must also have a
  class, right? Exactly. Python lets us examine the class of an
  object with the __class__ attribute. Let's see this in action:
    #+BEGIN_EXPORT html
    <p align="right">
    <a href="http://eli.thegreenplace.net/2011/08/14/python-metaclasses-by-example/">
    Eli Bendersky</a>
    </p>
    #+END_EXPORT
  #+END_QUOTE
  #+BEGIN_SRC python :pp
  class SampleClass(object): pass
  
  sample_object = SampleClass()
  sample_object.__class__
  SampleClass.__class__
  #+END_SRC

  #+RESULTS:
=
>>> >>> <class '__main__.SampleClass'>
<class 'type'>
=  

* Metaclass
  #+BEGIN_QUOTE
  A metaclass is defined as "the class of a class". Any class whose
  instances are themselves classes, is a metaclass. So, according to
  what we've seen above, this makes =type= a metaclass - in fact, the
  most commonly used metaclass in Python, since it's the default
  metaclass of all classes.
    #+BEGIN_EXPORT html
    <p align="right">
    <a href="http://eli.thegreenplace.net/2011/08/14/python-metaclasses-by-example/">
    Eli Bendersky</a>
    </p>
    #+END_EXPORT
  #+END_QUOTE
  #+BEGIN_SRC python
    class Meta(object):
        meta_variable = 'zero'

    class ExtClass(object):
        __metaclass__ = Meta
        ext_variable = 'infinity'


    print(ExtClass.__metaclass__)
    dumb_objext = ExtClass()
    print(dumb_objext.ext_variable)
    print(dumb_objext.__metaclass__.meta_variable)
  #+END_SRC

  #+RESULTS:
  : 
  : ... >>> ... ... ... >>> >>> <class '__main__.Meta'>
  : >>> infinity
  : zero

* Metaclass's __new__ and __init__
  #+BEGIN_SRC python
    class MyMeta(type):
        def __new__(meta, name, bases, dct):
            print('-----------------------------------')
            print("Allocating memory for class", name)
            print(meta)
            print(bases)
            print(dct)
            return super(MyMeta, meta).__new__(meta, name, bases, dct)
        def __init__(cls, name, bases, dct):
            print('-----------------------------------')
            print("Initializing class", name)
            print(cls)
            print(bases)
            print(dct)
            super(MyMeta, cls).__init__(name, bases, dct)

    class MyKlass(__metaclass__ = MyMeta):
        def foo(self, param):
            pass
        barattr = 2

  #+END_SRC

  #+RESULTS:

  
* Metaclass's __call__

* Examples

** Trivial

*** string.Template

** Sophisticated

** Complex

** Full-fledged
