#+BEGIN_EXPORT html
---
layout: page
title: Python Peculiarities Dissection
tagline: " test the toolbox"
permalink: /python/fundamentals/true-false-and-none.html
categories: [Python, Dissection, Learning by Testing, Literate Programming]
tags: [True, False, None]
---
#+END_EXPORT
#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+PROPERTY: header-args :exports both
#+PROPERTY: header-args+ :results output pp
#+PROPERTY: header-args+ :eval no-export
#+PROPERTY: header-args+ :session basement
#+TOC: headlines 2
* Intro
* Basics
#+begin_src python :results none :tangle tests/test_cornerstones.py :comments link
  import unittest

  """

  First and foremost let be sure about True, False and None
  existence:

  """


  class TestTheBasement(unittest.TestCase):

      def test_does_true_ever_exist(self):
          self.assertTrue(True)

      def test_does_false_ever_exist(self):
          self.assertFalse(False)

      # Now it is clear that True and False exist
      # and they are touchable

      def test_does_none_ever_exist(self):
          self.assertIsNone(None)
          self.assertFalse(None)  # None is showed up!
          # None has a boolean value

      def test_true_and_false_are_not_none_at_all(self):
          self.assertIsNotNone(True)  # NotNone (inverted None) has no
          self.assertIsNotNone(False)  # any Boolean value, it is unique
          self.assertFalse(None)  # But the vanilla None is False!

#+end_src

#+begin_src python :exports results
unittest.main(exit=False)
#+end_src

#+RESULTS:
: ............
: ----------------------------------------------------------------------
: Ran 12 tests in 0.000s
: 
: OK



* Comparisons

#+begin_src python :tangle tests/test_cornerstones.py :comments link


  class TestTheLiteralTruths(unittest.TestCase):

      def test_any_non_zero_is_true(self):
	  self.assertTrue(1)
	  self.assertTrue(-1)
	  self.assertTrue("L")
	  self.assertFalse(None)  # Except the None!

      def test_zero_and_none_are_same_as_false(self):
	  self.assertFalse(0)
	  self.assertFalse(None)  # and None as well!


  class TestPrimalsQuirks(unittest.TestCase):

      def test_true_equals_one(self):
	  self.assertTrue(True == 1)  # it is equal
	  self.assertFalse(True == -1)
	  self.assertFalse(True == 2)  # it isn't equal two!
	  self.assertFalse(True == 0)  # True is not zero

      def test_any_non_zero_value_is_true(self):
	  self.assertTrue("A")
	  self.assertTrue(32)
#+end_src

#+begin_src python :exports results
unittest.main(exit=False)
#+end_src

#+RESULTS:
: ............
: ----------------------------------------------------------------------
: Ran 12 tests in 0.000s
: 
: OK
