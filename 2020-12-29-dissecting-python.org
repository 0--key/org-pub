#+BEGIN_EXPORT html
---
layout: post
title: Dissecting Python
tagline: " inside out"
permalink: /python/books/disecting_python.html
categories: [Python Dissection]
tags: [book, template]
---
#+END_EXPORT

#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export

* Gestation                                                        :noexport:

** TODO Primary material gathering;

*** Books

    - "Learning Python" & "Python Pocket Reference" by Mark Lutz
    - 

*** DONE Quotes

    - "Programs must be written for people to read, and only incidentally  
     for machines to execute."

     Abelson & Sussman, SICP, preface to the first edition

    - "Short words are best and the old words when short are best of all."

      Winston Churchill

    - “The glass is neither half empty nor half full. It’s simply
      larger than it needs to be.”

      Grace Hopper

    - “Manage things. Lead people.”

      Grace Hopper

*** TODO Snippets
    - Docs about testing;
    - Docs about working with source code in Babel;

*** TODO Thoughts

    Why computer programming is a such tough task for humans? There
    are several plain predicatives to deem that is just overthinked.

**** 5 basic concepts of any programming language:

     - Variables;
     - Data structures;
     - Control structures;
     - Syntax;
     - Tools;


     
**** Major paradigms of programming:

     - Imperative;
     - Logical;
     - Functional;
     - Object-oriented;

       

     So, at the first glance all these concepts seem clear, dense and
     terse.

**** Wrong approach in studying

     Let's make a brisk glance on the history of programming
     languages. In the most cases it would shade the light on
     question: “How does it ever happen?”

     It is not secret that coding and computing by electronic
     macnihens is a relatevely fossil lore for humans. I suppose it
     was 1940s as an early begining. It was a straightforward coding
     due to absence of high-level programming languages.


     In 1950s Grace Hopper achived success and implement on practive
     her idea of compilation human-written programs into
     machine-readable set of precise instructions. The gestation of
     high-level programming languges started.
     
     The plehora of new and modern human-readable hight-level
     programming languages was announced in 1970s due to widely
     spreaded idea to compile the programm into the source code
     (mostly unreadable by humans).
     



    
** Indexing as an ordered sequence;

** Wrapping and extension.


* Harsh overture

      #+CAPTION: An image with color samples
      #+ATTR_HTML: :alt four figures image :title Color test :align right
      [[http://0--key.github.io/assets/img/color_test.png]]

  The paramount goal of writing is absolute clarity and density, so it
  might sound a quite strange. In reality, it is much complex task
  than it seems and a plethora of already written manuals about
  programming is a strict evidence to interpret this as a _spoiled
  approach_. In contrary: “Why men avoid reading and study some common
  things as programming in just one book? Is it /really/ so boring?”

  My grandma told me “Eugene Onegin” in just three evenings. She knew
  each string in the poem's sequence(!) It was so astounding and 40
  years later I still remember it. Not the poem itself! The
  remembrance of no-limit boundaies for human mind. Now I'm can
  conclude that only natural language is so complex and
  overcomplicated to transmit such long message for a such long time.

  30 years ago, in 1991 I became a programmer. My tool was a quite
  advanced micro-calculator programmed manually in a psudo-hexadecimal
  directives. It was incredibly precise, and it definitely were games
  there! “The fly of a bumblebee” named one.

  Further where were many programming languages studied by the manual
  testing, and in 2016 I push my head in to the wall. After sufficient
  time any piece of my programs became unreadable and seem so knotty
  like some aliens do it by his left toe. The same observation is True
  for programs written not by me. What the crap is going on!

  “Why we spawn such degenerative programs?”: I asked myself and seeking
  for clue 4 years in deep contemplation.

  And now I definitely know why it is so ugly with writing programs
  now. Not a secret at all. The clue to this puzzle is the nature of
  humans, a large set of caveats in their cognitive thinking:

  - =Do anything and anytime like others do=

    If all you know about did something successfully, all what you
    need to do is to mimic them. In other words it is ~heard style~.

  - =If it is so old - it is True by the age=

    A misconseption from our young childhood. Based on ~All adults are
    genious because they're old.~

  - =You can't change it as you like=

    Naturally if a man following his prejudices a long time anough to
    do nothing at all in the shame to do something wrong. ~Yes, he just
    can't do it. Period.~
  

  Unconsciously people do things in a some particular way
  and it seems a queer mistake. It is not common to find your reactive
  behavior as your own error looking backward.

  Why you can't ask yourself: “Why it is so difficult to read any book
  about programming?” Easy and habitual way to take it as granted. But
  for me it is a usual challenge. Maybe I am personally excessively
  curious and persistent to digging up to core of matter. And I have
  to say something about programming.

  Programming is easy by its nature and overcomplicated by the men. It is
  just something wrong with approach to study it.

  As you might notice casual programming handbook often dismantle
  programming wrong.

  Absolutely wrong. It uses English as a stem language, and

  programming language itself dissected by large set of
  _pseudo-tests_ -

  Even if any book can't be pretentious, this one doesn't. It is
  exactly the essence out of learning how to program machines to
  execute yours and only yours orders in a most effective way of
  studying: by sequentially, from the elementary ones to most complex,
  testing its features.
	  

* Relevant quotes
    #+BEGIN_QUOTE
    Programs must be written for people to read, and only incidentally
    for machines to execute."

   - *Abelson & Sussman, SICP, preface to the first edition*
   #+END_QUOTE

   -----
   #+BEGIN_QUOTE
    "Short words are best and the old words when short are best of
      all."

   - *Winston Churchill*
   #+END_QUOTE

   -----

    #+BEGIN_QUOTE
    “The glass is neither half empty nor half full. It’s simply larger
      than it needs to be.”

   - *Grace Hopper*
   #+END_QUOTE

   -----

   #+BEGIN_QUOTE
    “Manage things. Lead people.”

   - *Grace Hopper*
   #+END_QUOTE

   -----


* General observations:
     

** Debugging is a major task


   for a typical programmer and often it consumes up to 90% of their
   efforts to develop and maintain software nowadays;


** Cognitive dissonance and size of manuals

   There are tons of material and most of it represents ~programming
   language~ in an imperative style.


** An average age of readers

   
** Testing as an innate tool to learn for humans;
   - Testing in CS is a comparatively young concept;


** Einstellung effect in writing book about programming;


** Reading as a tourture 

   Avoidance of source code reading (escapism);


* Several acid notations


* Defining predicatives intentionally

It's naturally to draw the boundaries around your invention. It's
neither a silver bullet nor panacea for learners. Cognition demands a
lot of time for reading and digesting each chapter. Nothing
misterious.


** Why Python

** Why pure Python

** Already existing solutions overview


* Thurther deduction

  - Conversion a boring manual into a fiction book;
  - Black (Pandorra) Box approach;
  - Programming languages genealogy:
    + Atavisms:
      + 72 char per string;
  - Codex as a phenomena disclosure;
  - Related material allocation on two pages at once;
  - Pomodoro technique realization;


* Testing as a nodal ology tool

      #+CAPTION: An image with color samples
      #+ATTR_HTML: :alt An infant :title Infant building a tower
      [[http://0--key.github.io/assets/img/pydes/infant-building-a-tower.jpeg]]

If you're observed an infant behavior strictly enough you might
notice that it is a /silent (they can't talk yet) testing how things
work/. With brisk ingenuity baby implements the series of conscious acts
and it should be interpreted as experiments to examine the nature of
events. Bear in mind its inborn origin, because every child do it
absolutely autonomous, we got conclusion about a native and natural
compatibility of humans and testing approach for study.


** A dumb testing set (test the test itself)


** Testing Python innate constants

*** Boolean operations

*** Arithmetics


* Innate datatypes testing


* Enter the Function


* Enter the Object
