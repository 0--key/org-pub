#+BEGIN_EXPORT html
---
layout: post
title: Org-Jekyll
tagline: " export with color highlighting"
permalink: /emacs/org/export/jekyll/color-src-highlight.html
categories: [literate programming, emacs, org]
tags: [Jekyll, src hightlighting, html-export]
---
#+END_EXPORT

#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2

* Caveat
  By default settings =Org= exports /src-blocks/ with in-line
  syntax highlighting by =css= It seems a bit wierd and old-fashion,
  thus lets take an attempt to elaborate more neat solution.

* Define html export variables
  #+BEGIN_SRC elisp :results none
  (setq org-html-htmlize-output-type 'css)
  ;; (setq org-html-htmlize-output-type 'inline-css) ;; default
  (setq org-html-htmlize-font-prefix "org-")
  ;; (setq org-html-htmlize-font-prefix "") ;; default
  #+END_SRC

* Define CSS style
  #+INCLUDE: "/usr/local/share/DVCS/0--key.io/assets/themes/css/org.css" src css

* Modificate Hooligan theme
  Add to =/_includes/themes/hooligan/default.html= *head*
  string ~<link href="/assets/themes/css/org.css" rel="stylesheet" type="text/css" media="all">~

* Python scr block highlighting test
  #+BEGIN_SRC python
    def order(string):
        mixed_string_words = []
        for word in string.split():
            mixed_string_words.append(detect_number(word))
        pure_words = []
        for i in sorted(mixed_string_words, key=lambda x: x[1]):
            #print(i, i[0])
            pure_words.append(i[0])
        return ' '.join(pure_words)
  #+END_SRC

* Python include file highlighting test
  #+INCLUDE: "/usr/local/share/DVCS/org-pub/toy_tasks.py" src python

* Corollary

** Pros
   HTML code which produced as an export out from =org= file is
   clearly much dense and terse, hence - becomes much readable.
** Cons
   Inentation highlighting (wich is a perfect feature in =EWW=)
   disappeared.
