#+BEGIN_EXPORT html
---
layout: post
title: Write Python programs
tagline: " by means of Emacs' toolbox"
permalink: /coding/codewars.html
categories: [literate programming, Python, CodeWars, emacs]
tags: [coding, algorithms]
---
#+END_EXPORT

#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export
* Happy Numbers
** Description
   #+BEGIN_QUOTE
   A happy number is a number defined by the following process:
   starting with any positive integer, replace the number by the sum
   of the squares of its digits, and repeat the process until the
   number equals 1 (where it will stay), or it loops endlessly in a
   cycle which does not include 1. Those numbers for which this
   process ends in 1 are happy numbers, while those that do not end in
   1 are unhappy numbers (or sad numbers) (Wikipedia). For example
   number 7 is happy because after a number of steps the computed
   sequence ends up with a 1: 7, 49, 97, 130, 10, 1 while 3 is not,
   and would give us an infinite sequence: 3, 9, 81, 65, 61, 37, 58,
   89, 145, 42, 20, 4, 16, 37, 58, 89, 145, 42, 20, 4, 16, 37, ...
   Write a function that takes n as parameter and return true if and
   only if n is an happy number.
   #+END_QUOTE
** Solution

   Obviously that any repetition in sequence imply an infinite loop.
   Therefore it should be easily detected as a signal of
   =unhappiness=.

   #+BEGIN_SRC python
     def is_happy(n):
	 if n in [1, 7]:
	     return True
	 else:
	     return False

     def sum_of_squares(p):
	 s = str(p)
	 q = 0
	 for i in s:
	     q += int(i) * int(i)
	 return q

     assert(sum_of_squares(22) == 8)

     assert(is_happy(1))
     assert(is_happy(7))
   #+END_SRC

   #+RESULTS:
   : None
