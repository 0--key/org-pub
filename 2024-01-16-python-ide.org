#+BEGIN_EXPORT html
---
layout: page
title: Cook Python
tagline: " easy&peasy"
permalink: /python/ide.html
categories: [Python, IDE, Emacs, Eglot, Elpy]
tags: [efficiency, software development]
---
#+END_EXPORT

#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t eval:no-export
#+TOC: headlines 2
* Intro

Nowadays interactive development environment (IDE) are an ubiquitous
solution with main objective to push forward productivity and
effectiveness at all stages of software development. Actually the
purpose of its creation and usage is to alleviate the headache of
professionals by reducing the number of silly mistakes and stupid
errors.

#+begin_quote
The metaphor about a carpenter and an axe.
#+end_quote

Of course, it is not a silver bullet - professional should study how
to use these powerful tools /properly/, and it itself requires a lot
of precious time and effort to accomplish. After these unavoidable
preparations most of tedious, knotty and complex tasks become
easy&peasy to solve, and engineer or developer just happily forget his
previous bloody toil under the code writing and, the most significant
detali, - his fruitless attempts to extend code's functionality, debug
or refactor it.

~Emacs~ provides a variety of tools to work with source code, and
making a bundle out from this tools SD or SE create IDE. As the main
aim is to obtain a proficiency and fluency in ~cooking Python inside
Emacs~, so we focus our attention on _Pythonic IDEs_, their features,
scope of usage, capabilities and facilities.

* ToolBox

~Python~ itself:
#+begin_src sh :results output :exports both
  python3 --version 2>&1
#+end_src

#+RESULTS:
: Python 3.11.2

~Python~ is relatevely old programming language and it widely and
deeply supported by =vanilla= ~Emacs~ by its native packages.

** Python-mode

#+begin_quote
=python-mode= is an autoloaded, interactive and natively compiled
function defined in python.el.gz.
#+end_quote

So, by default, when you're opening any ~Python~ file in your ~Emacs~,
the =python-mode= assists you, and allow to use several its useful
functions and has even key-binding for most useful ones:

#+begin_quote
<backtab>  python-indent-dedent-line
C-M-h      python-mark-defun
C-M-i      completion-at-point
C-M-q      prog-indent-sexp
C-M-u      python-nav-backward-up-list
C-M-x      python-shell-send-defun
C-c <      python-indent-shift-left
C-c >      python-indent-shift-right
C-c C-c    python-shell-send-buffer
C-c C-d    python-describe-at-point
C-c C-e    python-shell-send-statement
C-c C-f    python-eldoc-at-point
C-c C-j    imenu
C-c C-l    python-shell-send-file
C-c C-p    run-python
C-c C-r    python-shell-send-region
C-c C-s    python-shell-send-string
C-c C-t c  python-skeleton-class
C-c C-t d  python-skeleton-def
C-c C-t f  python-skeleton-for
C-c C-t i  python-skeleton-if
C-c C-t m  python-skeleton-import
C-c C-t t  python-skeleton-try
C-c C-t w  python-skeleton-while
C-c C-v    python-check
C-c C-z    python-shell-switch-to-shell
DEL        python-indent-dedent-line-backspace
M-a        python-nav-backward-block
M-e        python-nav-forward-block
#+end_quote

Suffice to notice, that ~Emacs~ in charge to cope gracefully with
~Python~ even in its =vanilla= edition, and it is the start point to
bother about automation and enhancement.

** IPython
** Unittest
** Eglot
** Elpy
* The Sandbox
* Routine task set automation
** Project
** Projectile
** Elpy
** Eglot
* TODO TDD with CodeWars

#+begin_src sh :results output :exports both
  pwd
  ls CodeWars 2>&1
  ls CodeWars/tests/ 2>&1
#+end_src

#+RESULTS:
#+begin_example
/home/alioth/Git/0--key/org-pub
constants.py
constants.py~
__init__.py
__pycache__
tests
__init__.py
__pycache__
test_init.py
test_init.py~
#+end_example

#+begin_src python :results output :exports both :tangle CodeWars/constants.py :comments link
  first_constant_value = 1
  # just comment
#+end_src


#+begin_src sh :results output :exports both
  pwd 2>&1
  # ls Codewars/tests/ 2>&1
#+end_src

#+RESULTS:
: /home/alioth/Git/0--key/org-pub


#+begin_src sh :results output :exports both
  cd ./CodeWars/
  pwd 2>&1
  python -m unittest discover
#+end_src

#+RESULTS:
