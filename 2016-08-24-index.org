#+BEGIN_EXPORT html
---
layout: page
title: Intro
tagline: 'Cook it gently._/\/\/^\/\/\/-<8<'
permalink: /index.html
categories: [Emacs, Data Science]
tags: [concept, overview]
---
#+END_EXPORT

#+STARTUP: showall
#+OPTIONS: tags:nil toc:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2


* What Literate Programming is?

  A paragon of clarity with the aim to reveal some concept, written in
  any programming language.

  #+BEGIN_QUOTE
  Let us change our traditional attitude to the construction of
  programs: Instead of imagining that our main task is to instruct a
  computer what to do, let us concentrate rather on explaining to
  human beings what we want a computer to do.

  The practitioner of literate programming can be regarded as an
  essayist, whose main concern is with exposition and excellence of
  style. Such an author, with thesaurus in hand, chooses the names of
  variables carefully and explains what each variable means. He or
  she strives for a program that is comprehensible because its
  concepts have been introduced in an order that is best for human
  understanding, using a mixture of formal and informal methods that
  reinforce each other.

  â€“ *Donald Knuth*

  #+END_QUOTE

  -----
** What is programming challenge?                                  :noexport:

   #+BEGIN_QUOTE
   Believe it or not, any course in computer programming covers /all/
   the tools strictly necessary to solve any problem that can be solved
   with a computer. A very famous computer scientist named Alan Turing
   conjectured, and it is now widely accepted, that any problem
   solvable with computers requires only the basic statements that all
   computer programming languages include: decision statements (e.g. ,
   if), looping statements (e.g. , for and while) and the ability to
   store and retrieve data. Since you already know about these, you may
   wonder what else there is to learn. That's a good question.
  
   If you think of computer programming as a process similar to
   constructing a building, right now you have the knowledge equivalent
   to how to use a few tools such as a hammer, screwdriver, saw, and
   drill. Those might be all the tools necessary to build a house, but
   that does not mean you can build yourself a habitable home, let
   alone one that meets modern building codes. That's not to say that
   you can't do some useful things. You are probably capable of
   building benches or birdhouses, you're just not yet ready for the
   challenges that come with a larger project. In programming, just as
   in house construction, tackling bigger projects requires additional
   knowledge, techniques, and skills.
   
   #+HTML: <p align="right">
   #+HTML: <a href="https://www.amazon.com/Data-Structures-Algorithms-Using-Python/dp/1590282337">
   #+HTML: Data Structures and Algorithms Using Python and C++</a>
   #+HTML: </p>
   #+END_QUOTE
   -----
** Why Test Driven Development Is Such Effective?                  :noexport:

   #+BEGIN_QUOTE
   As the TDD approach became a standard option in software development
   therefore it is very time to wrap all code you're studied already in
   this modern envelop. /It is not just a modern quirk/, it effectively
   used to enhance your general coding skill simultaneously tying:

   - initial idea clarification;
   - acceptance criteria definition;
   - frequent and steady code quality testing;
   - source code purification;
   - bug detection on their infant age;
   - simplify software development process as a whole;
   - /grant to you ability/ to do your job ten times faster.

   Next would be as a *literate programming tutorial* designed exactly
   for lucid execution on your host. In addition it might serve to you
   as a gauge and a start point, or even to encourage you in your
   journey across the realm of knowledge. Exactly to rectify your
   personal programming skill all code samples should be run easily,
   hence it is possible to modify, improve or rearrange its content on
   your own taste.

   For experienced users I might suggest to fork this project source
   code on [[https://github.com/0--key/org-pub][Github]] and evaluate it for your personal usage. It might be
   curious to you to substitute your own variables, or, in many cases
   to re-write one or another chunk of code. On my point of view it
   should be a very /comprehensive method to learn programming by
   active reading/.

   #+BEGIN_EXPORT html
   <p align="right">Anton S. Kosinov</p>
   #+END_EXPORT
   #+END_QUOTE

** Brief prelude                                           :prelude:noexport:

   #+BEGIN_QUOTE
   Any science is an experience which forged and enveloped in some
   skill. Data science by its nature built on data.

   There are several levels of data acquisition:
   - Read-only access is an initial proves possession over some
     particular data.
   - There are several much precise tools to compose quires and get
     much informative data out of array. It's the second flow on data
     processing functions list.
   - The third one might be data integrity checking strategy on duty to
     prevent any data corruption and lost.
   - And as a final stage in data cooking it might be data visualisation.
   #+END_QUOTE

** General description                                 :description:noexport:

   There are infinite number of wrong approaches and the best path to
   achieve some skill is to learn it by doing. For example it's
   completely impossible to play basketball with no ideas about the
   rules of this dexterity demonstration. As another premise of
   apprenticeship it might be noticed about Ancient Greek samples of
   great thinkers, who ponder about most of our modern science in the
   same way. All they was scholars and learn all life long.

** Preamble                                                        :noexport:

   #+BEGIN_QUOTE
   Of cause learning by doing is an uttermost level of human creativity.
   It requires a lot of passion, huge amount of time and the hardships
   happen certainly. And it is a peculiar time machine. There is one
   way further, and a plethora of noways there.
   #+END_QUOTE

*** Short description

    #+BEGIN_QUOTE
    Python 3.4.1 under the detailed scrutiny by unittest module.   
    #+END_QUOTE

*** Description

    #+BEGIN_QUOTE
    Literate programming book for wide range of learners by reading
    and typing. A little bit of primitive mathematics used for
    self-explanatory clarity in proves. All language's features hooks and
    idioms are available to test on Emacs frame.
    #+END_QUOTE

** Prerequisites                                                   :noexport:

*** Ubuntu 14/16.04

*** Python3

*** Emacs 24.4

* Toolset overview                                                 :noexport:
** Emacs
*** Tips

*** Literate Programming

*** elisp

** Python

*** stdlib

*** how-to

** SQLite3
*** Innate shell

*** [[http://0--key.github.io/sqlite3/data_types.html][Data types]]

*** [[http://0--key.github.io/python/stdlib/sqlite3/interaction.html][Python interaction]]

** Postgres

*** Innate shell

*** Data types

*** Python interaction

** Git

*** Tips
   
* Methodology                                                      :noexport:


  #+BEGIN_QUOTE
  In my humble opinion the best way to learn programming language lies
  in reading source code of working code samples. Code and its output
  are crucially dense (habitually awkward) text. Read and run it by
  yourself. It's comprehensive and unique thus useful for education.
  If you wish to unleash your brain feel free to modify or even
  improve my code. In any case good luck, keep clear and detect calamity
  in their seeds.
  #+END_QUOTE

* Topics                                                           :noexport:

* Feedback                                                         :noexport:

* Conclusion                                                       :noexport:
