#+BEGIN_EXPORT html
---
layout: post
title: MatPlotLib
tagline: " is innate Python"
permalink: /data-visualization/matplotlib/intro.html
categories: [data vizsualization]
tags: [matplotlib]
---
#+END_EXPORT

#+STARTUP: showall
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval noexport

* GNU Octave meets Python

** Data importing
   #+BEGIN_SRC python :results none :session perc
     import numpy as np
     import scipy.io


     def read_dataset(filename):
         """Reads data from .mat binary file."""
         data = scipy.io.loadmat(filename)
         return [data[k] for k in ('neg_examples_nobias',
                                   'pos_examples_nobias',
                                   'w_init', 'w_gen_feas')]
   #+END_SRC


   #+BEGIN_SRC python :results output :session perc
     (nen, pen, wi, wg) = read_dataset('data/dataset1.mat')
     print(nen, '\n\n', pen, '\n\n', wi, '\n\n', wg)
     print(type(nen))
   #+END_SRC

   #+RESULTS:
   #+begin_example

   [[-0.80857143  0.8372093 ]
    [ 0.35714286  0.85049834]
    [-0.75142857 -0.73089701]
    [-0.3         0.12624585]] 

    [[ 0.87142857  0.62458472]
    [-0.02       -0.92358804]
    [ 0.36285714 -0.31893688]
    [ 0.88857143 -0.87043189]] 

    [[-0.62170147]
    [ 0.76091527]
    [ 0.77187205]] 

    [[ 4.3496526 ]
    [-2.60997235]
    [-0.69414749]]
   <class 'numpy.ndarray'>
#+end_example

** NdArray manipulations

*** Directly
    #+BEGIN_SRC python :results output :session perc :pp :eval noexport
      for i in nen:
          print(i[0], i[1], type(i[1]), '\n')
    #+END_SRC

    #+RESULTS:
    : 
    : ... -0.808571428571 0.837209302326 <class 'numpy.float64'> 
    : 
    : 0.357142857143 0.85049833887 <class 'numpy.float64'> 
    : 
    : -0.751428571429 -0.730897009967 <class 'numpy.float64'> 
    : 
    : -0.3 0.126245847176 <class 'numpy.float64'>

*** Converted
    #+BEGIN_SRC python :results output :exports both :eval noexport :session perc
      for i in nen.tolist():
          print(i[0], i[1], type(i[1]), '\n')
    #+END_SRC

    #+RESULTS:
    : 
    : ... -0.8085714285714286 0.8372093023255818 <class 'float'> 
    : 
    : 0.3571428571428572 0.8504983388704321 <class 'float'> 
    : 
    : -0.7514285714285714 -0.7308970099667773 <class 'float'> 
    : 
    : -0.2999999999999999 0.1262458471760799 <class 'float'>

** Data visualization

*** Simple
    #+BEGIN_SRC python :results file :session perc :exports code
      import matplotlib.pyplot as plt
      plt.plot([1,2,3,4], [1,4,9,16], 'ro')
      plt.axis([0, 6, 0, 20])
      plt.savefig('img/plt/first_test.png')
    #+END_SRC

    #+RESULTS:
    [[file:[0, 6, 0, 20]]]

    [[http://0--key.github.io/assets/img/plt/first_test.png]]

*** Colorization
    #+BEGIN_SRC python :results file :session perc :exports code :eval noexport
      ax = plt.gca()
      ax.set_axis_bgcolor('black')
      # ax.set_axis_bgcolor((1, 0, 0))
      plt.plot([1,2,3,4], [1,4,9,16], 'b^')
      plt.axis([0, 6, 0, 20])
      plt.savefig('img/plt/second_test.png')
    #+END_SRC

    #+RESULTS:
    [[file:[0, 6, 0, 20]]]

    [[http://0--key.github.io/assets/img/plt/second_test.png]]

*** Full-fledged dark theme
    #+BEGIN_SRC python :results file :exports code :eval noexport
      import numpy as np
      import matplotlib.pyplot as plt


      plt.style.use('dark_background')

      fig, ax = plt.subplots()

      L = 6
      x = np.linspace(0, L)
      ncolors = len(plt.rcParams['axes.prop_cycle'])
      shift = np.linspace(0, L, ncolors, endpoint=False)
      for s in shift:
          ax.plot(x, np.sin(x + s), 'o-')
      ax.set_xlabel('x-axis')
      ax.set_ylabel('y-axis')
      ax.set_title("'dark_background' style sheet")

      plt.savefig('img/plt/dark_test.png')
    #+END_SRC

    #+RESULTS:
    [[file:]]

    [[http://0--key.github.io/assets/img/plt/dark_test.png]]
   
*** Scattering
    #+BEGIN_SRC python :results file :exports code :eval noexport
      import matplotlib.pyplot as plt

      plt.style.use('dark_background')

      x = [1, 2, 3, 4, 5]
      y = [6, 7, 8, 9, 11]

      plt.scatter(x, y, color='y')

      plt.xlabel('x')
      plt.ylabel('y')
      plt.title('Simple scattering')
      plt.savefig('img/plt/simple_scatter.png')
    #+END_SRC

    #+RESULTS:
    [[file:]]

    [[http://0--key.github.io/assets/img/plt/simple_scatter.png]]

*** All together
    #+BEGIN_SRC python :results file :exports code :eval noexport
      import matplotlib.pyplot as plt

      plt.style.use('dark_background')
      data_neg = [[-0.80857143, 0.8372093],
                  [ 0.35714286, 0.85049834],
                  [-0.75142857, -0.73089701],
                  [-0.3, 0.12624585]]

      data_pos = [[0.87142857, 0.62458472],
                  [-0.02, -0.92358804],
                  [0.36285714, -0.31893688],
                  [ 0.88857143, -0.87043189]]

      for i in data_neg:
          plt.scatter(i[0], i[1], color='y')

      for i in data_pos:
          plt.scatter(i[0], i[1], color='r')


      plt.xlabel('x')
      plt.ylabel('y')
      plt.title('Data scattering')
      plt.savefig('img/plt/data_scatter.png')
    #+END_SRC

    #+RESULTS:
    [[file:]]
    
    [[http://0--key.github.io/assets/img/plt/data_scatter.png]]

*** Parabola
    #+BEGIN_SRC python :results file :exports code :eval noexport
      import numpy as np
      from math import exp
      import matplotlib.pyplot as plt


      def custom_function(x):  # sigmoid(x):
          return x * x  # 1. / (1 + exp(-x))


      x = np.array(range(-10, 11))
      y = custom_function(x)  #sigmoid(x)
      plt.style.use('dark_background')
      plt.plot(x, y)
      plt.savefig('img/plt/sigmoidal_f.png')
    #+END_SRC

    #+RESULTS:
    [[file:]]

    [[http://0--key.github.io/assets/img/plt/parabola.png]]
